//create new application
>>>rails new Blog

//change to blog directory
>>>cd Blog

//command to run the rails server
>>>rails server

//generate the post
>>>rails generate scaffold post title:string body:text

//generate the comment
>>>rails generate scaffold comment post_id:integer body:text

// create the post and comment database tables using:
>>>rails db:migrate

//a list of all the URLs currently recognized by your application will be provided.
>>>rake routes

Each time we ran the scaffold generator in our blog application, Rails
created a database migration file and placed it in the db/migrate
directory.
Rails uses the rake command to run these migrations, which creates
a schema, from which appropriate databases can then be created.
Because migrations can also be used to undo the work of previous
migrations (e.g., to make corrections), they are timestamped, and
executed in the order they were created. The filename contains the
timestamp


//Connect comment with post by editing the model for both
// in comment add
	class Comment < ActiveRecord::Base
	belongs_to :post
	end
//in post
	class Post < ActiveRecord::Base
	has_many :comments, dependent: :destroy
	end

Dependent makes sure if a post is deleted then all the dependent comments are deleted as well.

//now run rake routes to see update routes

one can use rake console to run commands to verify the setup

p = Posts.all
p[0].comments //return all the comments for 1st post
p[0].commnets.count // retruns the number of comments for 1st post
Similarily
q= Comments.all
and so on

//CRUD -- Create Read Update Delete .. four basic opeartions on the contents of the blog

//Validation

Data Validation is the process of ensuring your web application operates on
clean, correct and useful data.

Ex - Ensure a user provides a valid email address,phone number, etc.
	-- Ensure that inputs (505) 255-1234, 505-255-1234..

Ensure that"Business rules" are not being violated, e.g., a comment cannot be stored without a postID

 --> The most common web application security weakness is failure to validate client-side input -SQL injection, cross-site scripting and buffer overflow attacks are enabled.


Data Validation can happen on client side using javascript/HTML5

In case of web application, controller-level and model -level are used to validate

Database stored procedures can also be used for data validation.

Client-Side -- Involves checking that HTML forms are filled out correctly.
	- Javascript, running in the browser, has traditionally been used.
	- HTML5 now has more specific "input types" that can be checked, along with 		the "required" attribute.

	If javascript is turned off in the browser, hacker can bypass the check.

	If server checks for validation, it can grab a lot of time.	

	Works best when combined with server-side validations.

Server-Side -- Checks made after an HTML form has been submited.
	- Database(stored procedures) - Database-dependent, so not portable.
	Useful if many applications are using the database.
	- Controller-Level - We'll see later that you don't want to put too much logi in the controller(keep them skinny).
	- Model-level - A good way to ensure that only valid data is stored in your database, in a database agnostic way.


ActiveRecord Callbacks

	-- We can think of the objects in an OO system as having a lifecycle --
	they are first created, can later be updated and also destroyed.
	-- ActiveRecord objects have methods that can be called in order to ensure 
	integrity at teh various stages of their lifecycle.

	ex. 
 		-- Don't create a new object if the user already exists in the database.
		-- Ensure that all of an object's attributes are valid bfore allowing it to be saved to the database.
		-- When destorying an object , destory all the objecs that depend on it.


	-- Callbacks are method that get at certain points in an ActiveRecords object's
	lifecycle -- they are "hooks" into the lifcyle, allowing' you to trigger logic
	before or after the state of an object changes.

Validations
	-- Validations are a type of ActiveRecord callback that can be sued to ensure only valid data is stored in your Rails databases.
	-- The create, save and update methods trigger validations, and will only allow
	a valid ActiveRecord object to be saved to the database.

	--Validations are defined in your models.

	Ex. 
	 class Person < ActiveRecord::Base
		Validates_presence_of :name //methods
		validates_numerically_of :age, :only_integer => true
		valdiates_conformation_of :email
		validates_length_of :password, :in =>8..20
	 end


Add validate_presence_of :body and validate_presence_of :title to the Post.rb file in models

and similarily add validate_presence_of :post_id and validate_presence_of :body


For nesting the comments under the posts modify the routes.rb file in the config folder.

BlogApp::Application.routes.draw do
  resources :comments

  resources :posts do
    resources :comments
  end




Introduction to Ruby Programming Language

 -- Background
 -- Classes and Inheritance
 -- Objects and Variables
 -- Strings, Regular Expressions and Symbols
 -- Expressions and Control Structures
 -- Collections,Blocks and Iterators
p[
## Ruby Programming Language

* Rails was built using the Ruby programming language.
* Ruby code shows up in models:
	class Post < ActiveRecord::Base
	end

	views:
	    <%= @post.title %>
	
	contollers:
	
	def destroy
		@post.destroy
		respond_to do |format|
			format.html {redirect_to_posts_url}
			format.json {head :no_content}	
		end
	end


Famous Quote by Matz

	I wanted a scripting language that as more powerful than Perl, and more OO than python. That's why I decided o desing my own languages."'

Short hand method for getting and setting variables within the class

class Myclass
	attr_accessor :boo
end

use attr_writer and attr_reader

Classes are defined using the keyword class followed by the name of the class. The name must begin with a capital, and the convention is to use CamelCase.



class MyClass
	def boo # a getter method
		return @boo
	end
	def boo=(val)
		@boo = val
	end
end

mc = MyClass.new
boo =1
boo => 1

# There is no return value specificd in the methods. Rny methods have implicit return values - the value of the last expression executed in a method is its return value.

# The return statement still exist, but you' dont need to use it.

def min(x,y)
	if x<y then x else y end
end

# When invoking a method, parenthesis are optional

# Class methods are creared in the same way as normal methods, except they are prefixed by the keyword self.

Ex. 

class MyClass
	def self.cls_method
		"MyClass type"
	end
end

> MyClass.cls_method # => "MyClass Type"

# In ruby the last character of a method name is often used to indicate its behaviour:

	# if the method ends with a question mark it indicates that the return value is boolean
	# if the method ends with an exclamation , it indicated that the method can change the state of the object
	# In the previous cae, it is common to also provide a non-exclamation version of the method, which indicates that the modifies a copy of the object.
	# The keyword self can be used inside a object's methods in order to refere to current object.

Inheritence, Mixins and Extending Classes.

# Only single inheritence is supporeted; however, the mixin capability associated with modules basically gives your multiple inheritence.

# Classes are never closed, you can always add methods to an existing class
	- This applies to the classes you write as well as the standart, build in classes
	- You simply open up a class definition for an existing class, and the new contents you specify will be added to whatever's already defined for that class.

Ex. 

Class Fixnum
	def previous
		return self -1
	end
end

'

# Specifying Access

-- Within a class defintion you may specify access levels using the keywords public, private and protected.

-- The behaviour is a little different than in C++ or Java :
	- public - no access control, can be called by anyone.
	- protected - can be invoked only by objecs of the defining class and its subclasses.
	- private - can only be called in the context of the current object, without an object reference on the LHS, i.e., two objects of the same class cannot invoke each others private methods. Thus, the receiver of a private method is always self.


-- By defauly, every method is a lass is public, and every instance variable is protected.

# Accessors

-- There is a shorthand way of providing accessors for an object's' attributes":"

class MyClass
	attr_accessor :boo
end

-- Here's a better' example:

class Person
	attr_accessor :first_name, :last_name
end

will create attributes (instance variables) for first_nae and last_name ,as well as getter and setter methods for each.

-- If you only want a getter method, use attr_reader,and if you only want a setter, use attr_writer.

# Inheritence

-- The synatx for inheritence is:
	class NewClass < SuperClass
	end

-- THe initialize method, which is always private, is used to create a constructor that is invoked by calling enw on a class name . E.g., a = Array.new

--You can create a module with its own namespace by using the keyword module, and include a number of classes within it. You can include a module within another program by using the keyword require, e.g. require 'module_name'

-- Within a class, you use the keyword include to mixin a module. This makes all the methods defined in that module a part of the class that includes the module.




# Objects and Variables

-- Everything in Ruby is an Object, the Objec calss is the parent class of all classes in Ruby. Its methods are therefore available to all objects unless explicitiy overridden.


-- An important method in the Object class is class(). It returns the "type" of an object.

	> 1.class() # => Fixnum
	> 1.class # => Fixnum
	> 1.0.class # => Flaot
	> "Foo".class #=>String

-- Notice how parentheses are optional - they are commonly ommiteted.

-- The language syntax is sensitive to the capitalization of identifiers, in most cases
treating capitalized variables as constants.

-- Ruby does not use variable declarations, if you assign a value to a literal, an apporpiate variable named  after that literal is created.

Ex, >a = 2  # => 2
    > a     # = > 2

-- In this example, a has type Fixnum, this is an integer data in Ruby. The other integer type is Bignum (represents numbers of arbitary size).

Ex. 
	> a ="2" 	# => "2"

# Variables

-- Important. All assignments are done by reference in Ruby. i.e. a variable just holds a reference to an object, and does not care about the type of the object.

-- Ruby supports parallel assignments.
Ex. You can easily swap the values stored in two variables:

	> a = 2 	# => 2
	> b =1 		# => 1
	> puts a,b	# 2
			# 1
			# => nil
	a, b = b, a 	# => [1,2] // parallel assignments.

-- Ruby uses simple naming conventions to denote the scope of variables:
	-- name - could be a local variable
	-- @name - an instance variable
	-- @@name - a class variable
	-- $Name - a global variable.

	The @ and $ sigils enchance readability by allowing the programer to easily identify the roels of each variable.

-- Furthermore, local variable must begin with a lowercase letter, and the convention
is to use underscores, rather than camel case, for multi-word names.

-- Constants are any name that starts with an uppercase letter, and the convention is to use underscores.

-- Classes and modules are treated as constants, so they being with uppercase letters,
and the converntion is to use camel case.


# Strings, Regular Expressions and Symbols

# Strings

-- You can create literals in Ruby using either single or double quoes.
-- You can do a little bit more with double quoted strings. E.g., you can insert 
arbitrary Ruby expressions using string interpolation.

Ex. 

> "360 degress = #{2*Math::PI} radians"
=> "360 degrees = 6.28318307179586 radians"

-- If you enclose a string in single backquote (backticks), the string will be execturd as a command in the underlying OS.

Ex. 

> `date`
=> "Tue Oct 15 09:10:21 MDT 2013\n"

-- Strings in Ruby are mutable , as in C/C++ , but unline Java.Thus, each time Ruby encountersa new string literal, it create a new String Object. i.e. if you're' creating a string literal within a loop, each iteration will create a new String Object.
-- The ruby String class contains a number of methods which can be used to manipulate strings.

Ex. 

> name = "Homer Blimpson" #=> "Home Blimpson"
> name.length # =>14
> name[6] # =>"B"
> name[6..14] #=> "Blimpson"
> "Bart " + name[6..14] #=> "Bart Blimpson"
> name.encoding #=? #<Encoding:UTF-8>



# Regular Expressions

-- Ruby has a regular expression class,called Regexp,that is closely related to strings.
-- A regular expressions provides a concise and flexible means for mathcing strings of text, such as particular characters, words, or  patterns of characters.

-- In Ruby , a regular expression in writen in the form of:
	/pattern/modifiers
	where "pattern" is the regular expression itself, and "modifiers" are a series of characters indicating various options. The "modifiers" part is optional. This syntax is borrowed from Perl.

-- To test if a particular Regex matches (part of) a string, use the =~ operator. This operator returns the character position in the string of the start of the match (which evaluates to true in a boolean test), or nil if no match was found (which evaluates to false).

Ex. "Homer" =~ /er/ #=> 3

-- The preceding table only contained a partial list of the special characters that can be used in a Ruby regular expression. Consult a Ruby reference for more details.

-- Regular expression are often used to process strings.
Ex. The following Ruby expression will replace all of the non-digit characters in phone
with " ". i.e., it will strip everything out of the phone numbers, expect digits:
	phone.gsub!(/\D/, "")

-- Regular expression are commonly used to validate emails, phone numbers , and other user-suppleid input..

# Symbols

-- Ruby symbols are also closely related to strings.
-- A ruby interpreter maintains a symbol table where it stores the name of all classes, methods and variables.
-- You can add your own symbols to this table.Specifically, a symbol is created if you
precede a name with a colon.
Ex. 
	atrr_reader :row, :col

-- Ruby Symbol are used to represent names and strings; however unlike String objects, symbols of the same name and initialized and exist in memory only once during a Ruby session.

-- Ruby symbols are immutable , and cannot be modified during runtime.

Ex. 
	:name = "Home" 		# => will yield an error.


-- There's a big' space advantage associated with symbols , as each unique is only stored once in memory. Multiple strings with the same name my existin memory

Ex.

puts :name.object_id => yields 20488
puts :name.object_id #=> yields 20488
puts "name".object_id #=> yields 2168472820
puts "name".object_id #=> yields 2168484060

-- When should you use a string and when should you use a symbol?
General rules of thumb:
	-- if the contents(i.e., the sequence of characters) of the object is important
, e.g., if you need to manipulate these characters , use a string.

	-- if the identity of the object is imporatnt(in which case you probably don't want to ma'nipulate the characters), use a symbol.


# Expressions and Control Structures.

-- The ruby syntax is expression oriented.

-- Everything in Ruby is treated as an expression and therefore evaluates to something.

Ex. control structures for conditional execution or looping, which would be treated as statements in other languages, are treated as expessions in Ruby.


In ruby, if, case and for structures return the value of the last expression evaluaed within the structure.


-- Ruby has a rich syntax for expressing conditionals  - the most basic is:
	if expression
		code
	end

where code is executed if and only if the conditonal expression evaulates to something other than false or nil.

-- Basic elsif control structures.



# collections,Blocks and Iterators

--Ruby contains a number of collection classes -- these are classes that can be used to store collections of data.

-- The most important collection classes in Ruby and Array and Hash. In addition, a Set class was recently added to teh language.

--Each of thee collection classes includes the Enumerable module as a mixin. Thus, they share a common set of methods provided by Enumerable.

-- The Enumerable module provides iterator methods that can be used to iterate through 
(and operate on) each element in a collection.

-- Arrays are used extensively in Rails controllers: 
	
	def index
		@posts = Post.all
	end

// the above code takes all the post and assign it to instance variable @posts.

-- Arrays can store more 


# Code Blocks

-- A block consits of multiple lines of code, enclosed in curly braces, that can be passed as a parameter to a method.

-- Using this feature it is easy to buld code libraries which can delegate varying fucntionality to code blocks to be build later.

-- Important : A block may appear only in the source if it is adjacent to a method call
(on the same line as the method call's last parameter).
'

-- A block is inoked using the yield statement.

Ex. 

	def three_times
		yield
		yield
		yield
	end

> three_times {puts "Hello"}

will print "Hello"three times..

# Iterators

-- In ruby, the various loop strutures are rarely used -- It is more common to use iterators

-- The defining feature of an iterator method is that it invokes a block of code ,applying it to each element in a collection.

-- A collection class that includes the Enumerable module is required to supply an each method. This method must yeild the successive members of the colleciton.

-- Iterators work because you can pass parameter into blocks.

Ex. The each method in the Enumerable module works something like:

def each
	for each item in the collection
		yield (item)
	end
end


# Middleware

-- what is middlware?
-- The HTPP protocol
-- HTTP -Request
-- HTTP -Response
-- THe Model-View-Controller Design Pattern
-- Rails COntrollers-Request Handling
-- Rails Controllers -Response
-- MVC Implementation in Rails
-- THe Blog App -Iteration 4


#What is Middleware?

-- Middleware is the "software glue" between the operating system and applications on each side of a client-server architecture, some refere to it as the "dash" in the client-server.

-- I like to think of middleware as the software that provides services to applications beyond those available from the underlying operating system -- it connects application running on the server side, and passes data between them.

-- Thus ,middleware allows multiple processes running on different machines to interact
(where natively they would not be able to).

-- We're not go'ing to dig deeply into the Rials middleware --we'll focus m'ore on how the MVC design pattern is  implemented on top of it.

-- In rails, a middleware stack, called Rack, is automatically provided.

-- Rack provides a unified and simple interface that allows applications to "talk to"
web servers, including Mongrel. Thin, Phusion, Apache, etc. I.e., Rack is responsible for handling HTTP requests and responses.

-- Rack is used to group and organize modules, typically written in Ruby, and to specify he dependencies between them. Rack::Builder puts these together, creating a stack-like structure that can be used by a web application.To see the middleware installed in a Rails application, from the root of the application, type:
	$ rake middleware

-- Other Ruby frameworks, e.g., Sinatra, are also built on top of Rack.

-- In this class, we'll use' the default middelware configuration that Rails provides - but it's useful ' to know what's "under the hood"'.

-- When you execute:
	$ rails server

a Rack::Server object is created and attached to the web server(WEBrick by defauly), and the middleware components are loaded up.

-- The Rack::Server#start method starts the web server running listening on the designated port for HTTP requests.

-- Rack is used to group and organize modules, typically written in Ruby,
and to specify the dependencies between them. Rack::Builder
puts these together, creating a stack-like structure that can be used by
a web application. To see the middleware installed in a Rails
application, from the root of the application, type:
-- $ rake middleware


##### The HyperText Transfer Protocol (HTTP) Introduction.


telent www.udacity.com 80

GET /index.html

This is how we use http to get the main page of any website. HTTP port is generally set to 80.

Request side

-- 1. Request Line
	2. Header
	3. Message Body


Request Line -- The request line identifies the resource, along with the desired action (also called a "request","verb" or "method") that should be applied to it.


## Lecture 6 --  Rails Controller -- Request Handling

Action Pack

-- Views and Controllers in Rials are supported by Action Pack,which consits of three
Ruby modules: ActionDispatch, ActionController and Action View.

We'll consid'er the first two of thse in this module, and ActionView in the next module.

- Controller are the heart of a Rials application - when a user connects to your 
Rails application , they do it by asking the application to execute a controller action..


How does Rails deterine the controller action it will execute?

-- When an HTTP request is made to a Rails application, the ActionDispatch moduleis used to map that requst to a particular controller action.

-- Requests are mapped to controller actins via the rotues defined in ./config/routes.rb file. We already seen that you can view the 

rake routes

-- To connect a request to a controller action, you add a route to ./config/routes.rb

Examples of the various ways you can do this are provided as commens in that file.

--Ex. Adding the following to ./config/routes.rb:
	get 'products/:id' => 'catalog#view'

will map a GET requst that uses the URL:
	http://localhost:3000/products/10

to the view method in the CatalogController class, assigning the value to the params[:id] hash that will be made available to all methods in that class.

-- This doesn't look like' the syntax used by the scaffold generator to create the routes for our posts and comments:
	resources :posts
	resources :comments

RESTful Contollers

-- By default, Rails controller are RESTful and therefore use resource routing.

-- REST stands for Reprentational State Transfer.

-- The fundametnal philosophy behind REST is that clietns should communicate with
servers through stateless connections, where:

	-- Long term state is kepy on the server side by maintaining a set of identifiable resouces, posts and comments in our csae.
	-- The client can access these resources (perform CRUD operations on them) through a highly limited by uniform interface ( a set of URLs in our case).
	-- Computation proceeds by identifying the resource and the CRUD operation you'd like' to perform on it.

-- A REST-based web application can be contrasted to a RPC-based web application.
	- In RPC-based applciations, cliens send requests to servers, asking them to execute a specified procedure(avialabe to the server) using the supplied parameters. The server must advertise the services it offers. SOAP is a protocol, developed by Microsoft , that supports this approach.
	- REST assumes a simple set of verbs(controller actions/methods) that can operate over a rich set of nouns(resources).
	- RPC allows for arbitrary complexity on the server side.

-- The constraints imposed by REST can lead to web applications that easier-to-write and maintain. Rather than implemetning remotely accessible services, a simple inferface for performing CRUD operations on resoruces is provided. 
-- The programmable web, which treats the WWW as a vast collection of addressable resoruces , is greately faciliated by REST.


Sessions 

-- In general, the "state" of an application which needs to persist across requests should be stored in the database. E.g.,posts and comments are persisted in the database.

-- There are times when data needs to be persisted differently. E.g., the current contents of a shopping cart.

-- Whenever a user connects to a Rails application, a session is created.

-- Session data is stored in Rails using the hash structure that persists across requests, and can be accessed by controllers.
	Ex. 	session[:current_user] = user.id

-- A flash hash is part of the session that is cleared with each request (its value is made to the next request). A controller can use this to esnd a message that can be 
displayed to the user on the next request.

Ex. p
	flash[:notice] = 'Post was successfully created.'

Response - Rendering HTML or JSON

-- The request:
	http://localhost:3000/posts/1
assumes that HTML will be returned. I.e., it's the 'same as:
	http://localhost:3000/posts/1.html

-- Rails can return other formats, e.g., JSON capabilities are also provided by default.
Ex. The following request, will be routed to the same controller method as before:
	http://localhost:3000/posts/1.json

however, it will be rendered using the file:
	./app/views/posts/show.json.builder
and JSON will be returend to the client.

## Redirects

-- Rails may also respond to an HTTP request using the redirect_to method.
-- This method actually tells the browser to send a new request for a different URL.

Ex. redirect_to 'www.example.com'

-- Rails has shortcuts for URLs within your application - they're the ' prefix listed when you view routes:
	Ex. redirect_to posts_url
will redirect to the index method in the PostsController.

Ex. You can assing a flash message as a part of a redirection:

redirect_to @post, notice: 'Post was successfully created.'


#### MVC Interactions in Rails

1. The browser sends a request to the web server.
2. THe web browser processes the request, determines which route it belongs to
and dispatches that request to the corresponding controller method.
3. THe controller asks the model layer for all the information needed to complete the requests.
4. THe model layer collects the requested information and returns it to the controller.
5. The controller gives the appropriate infomation to th view requesting a particular format.
6. THe view renders the information in that format and gives it back to the controller.
7. THe controller assembles the toal page's 'html and gives it to the web server.
8. The web server returns the page to the browser.



## Controllers and View

-- The controller and view in the MVC design pattern are tightly coupled -- controllers supply data to views, and controller actions are typically the targets of the links provided in views.

-- In Rails, a controller makes every instance variable it creates availabe to the associated view files.

Ex. 

-- All post are retrieved in the PostsController#index method, and stored in the @posts array.

-- In the app/views/index.html.erb file this array is accessed using an iterator.

<% @posts.each do |post| %>
<tr>
	<td><%= post.title %></td>
	<td><%= post.body %></td>
	...
</tr>
<% end %>


## Dynamic HTML with ERb

-- In Rails, dynamic content is generated using templates, and the most common templating framework is Embedded Ruby (ERb).

-- ERb is a filter that takes a .html.erb template file as input and transforms it into
an HTMl output file as follows:

	- Normal HTML content is passed through the filter without modification.
	- Content between <%= and %> is interpreted as Ruby code and executed, with the results substituted back into the file as a string in place of the <%= ....%> string.

	- Content between <% and %> (no equal sign) is interpreted as Ruby code and executed, but the results are not substituted back inot the output file.



## Proper Use of ERb

-- Although ERb allows you to insert Ruby code into your view, as a matter of good design , use it sparingly!

-- E.g., in a RESTful architecture, the HTML code in ERb teplaes should specify the structure of the document, and the Ruby code should be used to provide(dynamic) information specific to particular resources.

-- Application-level functionality and business logic should never be found in ERb templaes.

-- For generating HTML elements and formatiing data in the view, there are numeros Rails helper methods - use them.



### Layouts

-- In order to generate the final HTML file that will be supplied to the browser, a layout file is invoked , passing the template to it as a block.

-- By default the app/views/layouts/application.html.erb is used. This file is automatically created whenever you create a new Rails application.

-- Advantage of layouts : By editing one file, and its associated stylesheet , we can change the look and feel of the entire site.

-- If you want to have different layouts for the different parts of a site, create a layout file that has the same name as the controller you want to associate it with,
and place it in the layouts folder.

Ex. app/views/layouts/posts.html.erb































